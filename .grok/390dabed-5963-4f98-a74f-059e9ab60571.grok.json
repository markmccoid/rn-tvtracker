{
	"cells": [
		{
			"blockId": "00b2b2f1-6e9d-4705-9f17-6f066e318d02",
			"caption": "createUpdateList Function in oState.actions",
			"data": {
				"contents": "function createUpdateList(tvShows: SavedTVShowsDoc[]): number[] {\r\n  // Loop through TV Shows and return a list of tvShowId numbers\r\n  // which should be updated\r\n  return tvShows.reduce((tvShowIds: number[], tvShow) => {\r\n    // Is show status canceled or Ended, do NOT update\r\n    if (tvShow.status === \"Canceled\" || tvShow.status === \"Ended\") {\r\n      return tvShowIds;\r\n    }\r\n    // create date-fns date objects and helper object\r\n    // REMEMBER, we are looking at the STORED data. So we are checking whether we need\r\n    // to hit the API to get the next interation of data.\r\n    const showDates = {\r\n      nextAirDate: tvShow.nextAirDate?.epoch && fromUnixTime(tvShow.nextAirDate.epoch),\r\n      lastAirDate: tvShow.lastAirDate?.epoch && fromUnixTime(tvShow.lastAirDate.epoch),\r\n      firstAirDate: tvShow.firstAirDate?.epoch && fromUnixTime(tvShow.firstAirDate.epoch),\r\n      lastUpdateDate: tvShow.dateLastUpdated && fromUnixTime(tvShow.dateLastUpdated),\r\n    };\r\n    const dateComparisons = {\r\n      nextAirLessEqualToday: tvShow.nextAirDate?.epoch <= getCurrentDate().epoch,\r\n      // How many days have passed since the last air date\r\n      daysSinceLastAirDate: differenceInDays(new Date(), showDates.lastAirDate),\r\n      daysSinceLastUpdate: differenceInDays(new Date(), showDates.lastUpdateDate) || 0,\r\n    };\r\n    console.log(\r\n      \"Compare Dates\",\r\n      tvShow.name,\r\n      tvShow.nextAirDate?.formatted,\r\n      dateComparisons.nextAirLessEqualToday\r\n    );\r\n    // nextAirDate exists and is less than or equal to todays date\r\n    // Which means this date has passed an a new next air date should be available\r\n    // unless this was last episode\r\n    if (\r\n      tvShow.nextAirDate &&\r\n      dateComparisons.nextAirLessEqualToday\r\n      //! Not sure if this is causing issues.  It shouldn't be, but can try adding\r\n      //! back in when get notifications set up.\r\n      // && dateComparisons.daysSinceLastUpdate > 1\r\n    ) {\r\n      return [...tvShowIds, tvShow.id];\r\n    }\r\n\r\n    // nextAirDate is undefined, but show is not canceled or ended\r\n    // either In Production or planned or Returning Series where we are waiting for next season.\r\n    //--OPTION 1\r\n    // If In Production or Planned, then we can use the dateLastUpdated to determine what to do\r\n    if (tvShow.status !== \"Returning Series\" && dateComparisons.daysSinceLastUpdate > 7) {\r\n      return [...tvShowIds, tvShow.id];\r\n    }\r\n    //--OPTION 2\r\n    // If Returning Series, check only if it has been 6 months since Last Air Date and been 7 days\r\n    // since lastUpdateDate\r\n    if (\r\n      tvShow.status === \"Returning Series\" &&\r\n      !showDates.nextAirDate &&\r\n      dateComparisons.daysSinceLastAirDate > 180 &&\r\n      dateComparisons.daysSinceLastUpdate > 7\r\n    ) {\r\n      return [...tvShowIds, tvShow.id];\r\n    }\r\n    // Must return existing array if nothing matches.\r\n    console.log(\"Update List\", tvShowIds);\r\n    return tvShowIds;\r\n  }, []);\r\n}\r\n",
				"file": "src/store/oSaved/actions.ts",
				"range": {
					"end": {
						"character": 2147483647,
						"line": 1046
					},
					"start": {
						"character": 0,
						"line": 982
					}
				},
				"scm": {
					"authors": [
						{
							"email": "markmccoid@gmail.com"
						}
					],
					"branch": "master",
					"file": "src/store/oSaved/actions.ts",
					"remotes": [
						{
							"name": "origin",
							"url": "github.com/markmccoid/rn-tvtracker"
						}
					],
					"repoName": "tvtracker",
					"revision": "c98485cc7748f0c26d213ea06892ee97c5727823",
					"sameRepo": true
				}
			},
			"id": "00b2b2f1-6e9d-4705-9f17-6f066e318d02",
			"type": "code",
			"version": 1
		},
		{
			"blockId": "d49e88d6-7bae-4276-8765-aaffa85b9dca",
			"data": {
				"formatCode": false,
				"isPreviewing": true,
				"text": "## Function To Auto Update Movies<div>Run on each load of the application.  i.e. when it loads the data from storage.</div>"
			},
			"id": "d49e88d6-7bae-4276-8765-aaffa85b9dca",
			"type": "markdown"
		},
		{
			"blockId": "d18c2a32-5927-4005-8e34-efec25ea017c",
			"caption": "Called From hydrateStore function",
			"data": {
				"contents": "  //! Auto Update TV Shows Implemententation\r\n  // Find shows that need updating and update them\r\n  const showUpdateList = createUpdateList(state.oSaved.savedTVShows);\r\n  // console.log(\"update list\", showUpdateList);\r\n  //\r\n  //map will return array of promises\r\n  let updates = await showUpdateList.map(async (tvShowId) => {\r\n    return await actions.oSaved.refreshTVShow(tvShowId);\r\n  });\r\n\r\n  await Promise.all(updates);\r\n  //! END Update Shows\r\n  //! ------------------\r\n",
				"file": "src/store/oSaved/actions.ts",
				"range": {
					"end": {
						"character": 2147483647,
						"line": 103
					},
					"start": {
						"character": 0,
						"line": 91
					}
				},
				"scm": {
					"authors": [
						{
							"email": "markmccoid@gmail.com"
						}
					],
					"branch": "master",
					"file": "src/store/oSaved/actions.ts",
					"remotes": [
						{
							"name": "origin",
							"url": "github.com/markmccoid/rn-tvtracker"
						}
					],
					"repoName": "tvtracker",
					"revision": "c98485cc7748f0c26d213ea06892ee97c5727823",
					"sameRepo": true
				}
			},
			"id": "d18c2a32-5927-4005-8e34-efec25ea017c",
			"type": "code",
			"version": 1
		},
		{
			"blockId": "9281ef7d-a174-4537-b0e5-7d446c4ccfce",
			"caption": "Update based on Next Air Date",
			"data": {
				"contents": "    // nextAirDate exists and is less than or equal to todays date\r\n    // Which means this date has passed an a new next air date should be available\r\n    // unless this was last episode\r\n    if (\r\n      tvShow.nextAirDate &&\r\n      dateComparisons.nextAirLessEqualToday\r\n      //! Not sure if this is causing issues.  It shouldn't be, but can try adding\r\n      //! back in when get notifications set up.\r\n      // && dateComparisons.daysSinceLastUpdate > 1\r\n    ) {\r\n      return [...tvShowIds, tvShow.id];\r\n    }\r\n",
				"file": "src/store/oSaved/actions.ts",
				"range": {
					"end": {
						"character": 2147483647,
						"line": 1022
					},
					"start": {
						"character": 0,
						"line": 1011
					}
				},
				"scm": {
					"authors": [
						{
							"email": "markmccoid@gmail.com"
						}
					],
					"branch": "master",
					"file": "src/store/oSaved/actions.ts",
					"remotes": [
						{
							"name": "origin",
							"url": "github.com/markmccoid/rn-tvtracker"
						}
					],
					"repoName": "tvtracker",
					"revision": "c98485cc7748f0c26d213ea06892ee97c5727823",
					"sameRepo": true
				}
			},
			"id": "9281ef7d-a174-4537-b0e5-7d446c4ccfce",
			"type": "code",
			"version": 1
		},
		{
			"blockId": "dcc54e83-9202-471a-9913-943c318c9836",
			"data": {
				"formatCode": false,
				"isPreviewing": true,
				"text": "### Watch - <div>I removed the daysSinceLastUpdate &gt; 1.\nThought it may be keeping update from happening.\nIt probably just means that the day that the next air date updates, it will update on every reload.<br></div>"
			},
			"id": "dcc54e83-9202-471a-9913-943c318c9836",
			"type": "markdown"
		}
	],
	"graphViewMetadata": {
		"edges": [
			{
				"id": "d18c2a32-5927-4005-8e34-efec25ea017c_bottom_00b2b2f1-6e9d-4705-9f17-6f066e318d02_top_qBf30z5HT3WdB1NyEVzByg",
				"source": "d18c2a32-5927-4005-8e34-efec25ea017c",
				"sourceHandle": "bottom",
				"target": "00b2b2f1-6e9d-4705-9f17-6f066e318d02",
				"targetHandle": "top"
			}
		],
		"graph": {
			"position": [
				-1953.1997506290659,
				262.62225497561724
			],
			"zoom": 1.2834258975629045
		},
		"nodes": [
			{
				"blockId": "00b2b2f1-6e9d-4705-9f17-6f066e318d02",
				"dimensions": {
				},
				"id": "dndnode_0",
				"position": {
					"x": 1350,
					"y": 450
				}
			},
			{
				"blockId": "d49e88d6-7bae-4276-8765-aaffa85b9dca",
				"dimensions": {
					"height": 161,
					"width": 596
				},
				"id": "dndnode_1",
				"position": {
					"x": 1260,
					"y": -225
				}
			},
			{
				"blockId": "d18c2a32-5927-4005-8e34-efec25ea017c",
				"dimensions": {
				},
				"id": "dndnode_2",
				"position": {
					"x": 1275,
					"y": -45
				}
			},
			{
				"blockId": "9281ef7d-a174-4537-b0e5-7d446c4ccfce",
				"dimensions": {
				},
				"id": "dndnode_4",
				"position": {
					"x": 1920,
					"y": 15.000000000000004
				}
			},
			{
				"blockId": "dcc54e83-9202-471a-9913-943c318c9836",
				"dimensions": {
					"height": 194,
					"width": 401
				},
				"id": "dndnode_5",
				"position": {
					"x": 1920,
					"y": -180
				}
			}
		]
	},
	"text": "",
	"title": "Auto Update TV Show Data",
	"version": 1
}